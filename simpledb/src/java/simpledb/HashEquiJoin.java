package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private OpIterator child1, child2;
    private TupleDesc td;
    transient private Tuple t1 = null, t2 = null;
    private HashMap<Object, ArrayList<Tuple>> h_map = new HashMap<Object, ArrayList<Tuple>>();
    // given object designation 

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
    	this.p = p;
    	this.child1 = child1;
    	this.child2 = child2;
    	td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.td;
    }

    public String getJoinField1Name()
    {
        // some code goes here
    	return this.child1.getTupleDesc().getFieldName(this.p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
    	return this.child2.getTupleDesc().getFieldName(this.p.getField2());
    }
    
    /*
     * Helper Function that loads and populates the h_map with the Tuples within the 
     * OpIterator for the first child. h_map being populated has the Field and ArrayList
     * of Tuples within the OpIterator. 
     */
    private boolean mapLoad() throws DbException, TransactionAbortedException {
    	
        int count = 0;
        this.h_map.clear();
        
        while (child1.hasNext()) {
            t1 = child1.next();
            ArrayList<Tuple> l = this.h_map.get(t1.getField(p.getField1()));
            if (l == null) {
                l = new ArrayList<Tuple>();
                this.h_map.put(t1.getField(p.getField1()), l);
            }
            l.add(t1);
            if (count++ == 10000) // arbitrary size of h_map
                return true;
        }
        return (count > 0);

    }
    

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	this.child1.open();
    	this.child2.open();
    	mapLoad();
    }

    public void close() {
        // some code goes here
    	super.close();
        child2.close();
        child1.close();
        this.t1=null;
        this.t2=null;
        this.listIt=null;
        this.h_map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	this.child1.rewind();
        this.child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;
    
    
    /*
     * Helper Function that sets the fields for the combined Tuple.
     */
    private Tuple setFields() throws TransactionAbortedException, DbException {
        t1 = listIt.next();

        int td1n = t1.getTupleDesc().numFields();
        int td2n = t2.getTupleDesc().numFields();

        Tuple new_t = new Tuple(this.td);
        for (int i = 0; i < td1n; i++)
            new_t.setField(i, t1.getField(i));
        for (int i = 0; i < td2n; i++)
            new_t.setField(td1n + i, t2.getField(i));
        return new_t;

    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	
    	if (listIt != null && listIt.hasNext()) {
            return setFields();
        }

        while (this.child2.hasNext()) {
            t2 = this.child2.next();

            // If match, create a combined tuple and fill it with the values
            // from both tuples
            ArrayList<Tuple> l = this.h_map.get(t2.getField(this.p.getField2()));
            if (l == null)
                continue;
            listIt = l.iterator();

            return setFields();

        }

        this.child2.rewind();
        
        if (mapLoad()) {
            return fetchNext();
        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
    	return new OpIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    	this.child1 = children[0];
        this.child2 = children[1];
    }

}
